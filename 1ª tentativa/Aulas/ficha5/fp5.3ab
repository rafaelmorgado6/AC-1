#define SIZE 10
#define TRUE 1
#define FALSE 0
#void main(void)
#{
# static int lista[SIZE];
# int houveTroca, i, aux;
 
#	// inserir aqui o código para leitura de valores e
#	// preenchimento do array
 
# for(i = 0; i < SIZE; i++)
# {
# 	print_string("\nIntroduza um numero: ");
# 	lista[i] = read_int();
# } 
 
# do
# {
#	houveTroca = FALSE;
# 	for (i=0; i < SIZE-1; i++)
# {
# 	if (lista[i] > lista[i+1])
# {
# 	aux = lista[i];
# 	lista[i] = lista[i+1];
# 	lista[i+1] = aux;
# 	houveTroca = TRUE;
# }
# }
# } while (houveTroca==TRUE);

# 		// inserir aqui o código de impressão do conteúdo do array
# for(p = lista; p < lista + SIZE; p++)
# {
#  	print_int10( *p ); // Imprime o conteúdo da posição do array cujo endereço é "p"
#  	print_string("; ");
# }
#}


# Mapa de registos
# p: $t0
# lista+Size: $t2
# SIZE-1 : $t3
# houve_troca: $t4
# i: $t5
# lista: $t6
# lista + i: $t7
# lista[i+1] = $t8
# lista[i] = $t9
 	
 	.data
 	.eqv print_int10,1
	.eqv print_string,4
	.eqv read_int,5
 	.eqv FALSE,0
 	.eqv TRUE,1
 	.eqv SIZE,10
str1:	.asciiz "Introduza os numeros da string\n"
str2:	.asciiz "Os numeros do array ordenados sao: \n"
str3:	.asciiz " ; "
 	.align 2		#Alinha o próximo item num endereço múltiplo de 2^n
lista:	.space 40 		# SIZE * 4
 	.text
 	.globl main
main: 
	la $a0,str1 	
 	ori $v0,$0,print_string 	
 	syscall			# print_string("Introduza os numeros da string\n");
 
	 la $t0,lista 		#
	 li $t2,SIZE		# $t2 = SIZE
	 sll $t2,$t2,2		# $t2 = SIZE * 4
 	 addu $t2,$t0,$t2	# $t2 = lista + SIZE
 				
while1:	bge $t0,$t2,do 		# while(p < list + SIZE) { 
 	
 	li $v0,read_int
 	syscall 		# $v0 = read_int();
 	
 	sw $v0,0($t0) 		# lista[p] = read_int();
 	
 	addiu $t0,$t0,4	 	# p++
	
	j while1
 	

do: 				# do {
	la $t6,lista		# $t6 = &lista[0] = lista
	
 	li $t4,FALSE 		# houve_troca = FALSE;
 	li $t5,0 		# i = 0;
 	
 	li $t3,SIZE
	subu $t3,$t3,1		# $t3 = SIZE - 1

for: 	bge $t5,$t3,endf 	# while(i < SIZE-1){

if: 	sll $t7,$t5,2		# $t7 = i * 4
 	addu $t7,$t7,$t6	# $t7 = &lista[i]
 	
 	lw $t8,0($t7) 		# $t8 = lista[i]
 	lw $t9,4($t7) 		# $t9 = lista[i+1]
 	
 	ble $t8,$t9,endif 	# if(lista[i] > lista[i+1]){
 	sw $t8,4($t7) 		# lista[i+1] = $t8
 	sw $t9,0($t7) 		# lista[i] = $t9
 	
 	li $t4,TRUE 		#
 				# }
endif: 	addi $t5,$t5,1		# i++;

	j for

endf:	beq $t4,TRUE,do		# } while(houve_troca == TRUE)
	
	la $a0,str2		
	li $v0,print_string
	syscall	 		# print_string("Os numeros do array ordenados sao: \n)

	li $t5,0 	
	
while2:	bge $t5,SIZE,endw	# while(i < SIZE)
	
	sll $t7,$t5,2		# $t7 = i * 4
	addu $t7,$t7,$t6	# $t7 = &lista[i] = lista + i
	
	lw $t8,0($t7) 		# $a0 = lista[i]
	or $a0,$0,$t8
	li $v0,print_int10
	syscall			# lista[i] = print_int10()
	
	la $a0,str3		
	li $v0,print_string
	syscall			# print_string(" ; ")
	
	addi $t5,$t5,1		# i++
	
	j while2
	
endw:
	jr $ra 			# termina o programa
