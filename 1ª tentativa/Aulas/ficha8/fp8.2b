# mapa de registos
# n: $a0 -> $s0
# b: $a1 -> $s1
# s: $a2 -> $s2
# p: $s3
# digit: $t0

	.data
	.eqv print_string,4
	.eqv read_int,5
	.eqv MAX_STR_SIZE,33
str:	.space MAX_STR_SIZE
	.text
	.globl main
main:
	addiu $sp,$sp,-4		# reservar espaço
	sw $ra,0($sp)			# reservar endereço
	
do1:	li $v0,read_int			# v0 = readi_int
	syscall
	move $s0,$v0			# s0 = v0 = val
	
	move $a0,$s0			# a0 = val
	li $a1,2			# a1 = 2
	la $a2,str			# a2 = str
	jal itoa			# chama itoa
	
	or $a0,$0,$v0			
	li $v0,print_string		# print_string(itoa(val,2,str))
	syscall
	
	move $a0,$s0			# a0 = val
	li $a1,8			# a1 = 8
	la $a2,str			# a2 = str
	jal itoa			# chama itoa
	
	or $a0,$0,$v0			
	li $v0,print_string		# print_string(itoa(val,8,str))
	syscall
	
	move $a0,$s0			# a0 = val
	li $a1,16			# a1 = 16
	la $a2,str			# a2 = str
	jal itoa			# chama itoa
	
	or $a0,$0,$v0			
	li $v0,print_string		# print_string(itoa(val,16,str))
	syscall
	
while1:	bne $s0,0,do1			# val != 0
	
	li $v0,0			# return 0
	
	lw $ra,0($sp)			# repor valor
	addiu $sp,$sp,4			# libertar espaço
	
	jr $ra				# fim main
	
##########################################################################	

itoa:	addiu $sp,$sp,-24		# reservar espaço 
	sw $ra,0($sp)			# reservar endereço
	sw $s0,4($sp)			# ''n
	sw $s1,8($sp)			# ''b
	sw $s2,12($sp)			# ''s
	sw $s3,16($sp)			# ''p
	sw $s4,20,($sp)			# ''digit
	
	move $s0,$a0			# s0 = n
	move $s1,$a1			# s1 = b
	move $s2,$a2			# s2 = s
	move $s3,$a2			# p = s
	
do:	remu $s4,$s0,$s1		# digit = n % b
	divu $s0,$s0,$s1		# n = n / b
	
	move $a0,$s4			# a0 = digit
	jal toascii			# chama toascii
	
	sb $v0,0($s3)			# *p++ = toascii(digit)
	addi $s3,$s3,1			# p++
	
while:	bgt $s0,0,do			# n > 0
	
	sb $0,0($s3)			# *p = '\0'
	
	move $a0,$s2			# a0 = s
	jal strrev			# chama strrev
	
	move $v0,$v0			# return s
	
	sw $ra,0($sp)			#repoe endereço
	sw $s0,4($sp)			#''
	sw $s1,8($sp)			#''
	sw $s2,12($sp)			#''
	sw $s3,16($sp)			#''
	sw $s4,20($sp)			#''
	addiu $sp,$sp,24		#libertar espaço
	
	jr $ra				# fim itoa
	
##########################################################################

toascii:
	addi $a0,$a0,'0'		# v+ = '0'

if:	ble $a0,'9',endif		# v > 9
	addi $a0,$a0,7			# v+ = 7

endif:	move $v0,$a0			# colocar no registo de retorno

	jr $ra				# dim toascii
	
###########################################################################
	
strrev:	
	addiu $sp,$sp,-16		# reserva espaço na stack, 16 
					# porque se usa 4 registor (4x4)
					# -16 pq é sado addiu (+)
	
	sw $ra,0($sp)			# guarda endereço de retorno
	sw $s0,4($sp)			# guarda valor do registo $s0
	sw $s1,8($sp)			# guarda valor do registo $s1
	sw $s2,12($sp)			# guarda valor do registo $s2
	
	move $s0,$a0			# registo "calee-saved"
	move $s1,$a0			# p1 = str
	move $s2,$a0			# p2 = str
	
while3:	lb $t0,0($s2)			# t0 = *p2
	beq $t0,'\0',endw4		# p2 != '\0'
	addiu $s2,$s2,1			# p2++
	j while3

endw4:	addiu $s2,$s2,-1		# p2--

while4:	bgeu $s1,$s2,endw3		# p1 < p2

	move $a0,$s1
	move $a1,$s2
	jal exchange			# exchange(p1,p2)
	
	addiu $s1,$s1,1			# p1++
	addiu $s2,$s2,-1		# p2--
	j while4
	
endw3:	move $v0,$s0			# return str
	lw $ra,0($sp)			# repoe endereço de retorno
	lw $s0,4($sp)			# repoe valor do registo $s0
	lw $s1,8($sp)			# repoe valor do registo $s1
	lw $s2,12($sp)			# repoe valor do registo $s2
	
	addiu $sp,$sp,16		# liberta espaço na stack
	
	jr $ra				# fim strrev
	
#########################################################################

exchange:
	lb $t0,0($a0)			# t0 = *c1
	lb $t1,0($a1)			# t1 = *c2
	
	sb $t0,0($a1)			# t0 = *c2
	sb $t1,0($a0)			# t1 = *c1
	
	jr $ra				# fim exchange
	
	