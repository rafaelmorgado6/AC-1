.data
	.eqv print_string,4
str1:	.asciiz "Arquitetura de "
str2:	.space 50
str3:	.asciiz "\n"
str4:	.asciiz "Computadores I"
	.text
	.globl main


main:
	addiu $sp,$sp,-4	# reservar espaço na stack
	sw $ra,0($sp)		# guardar endereço
	
	la $a0,str2		# a0 = str2
	la $a1,str1		# a1 = str1
	jal strcpy		# chama strcpy
	
	li $v0,print_string
	syscall			# print_string(str2)
	
	la $a0,str3
	li $v0,print_string
	syscall			# print_string('\n')
	
	la $a0,str2		# a0 = str2
	la $a1,str4		# a1 = str4
	jal strcat		# chama strcat
	
	li $v0,print_string
	syscall			# print_string(strcat)
	
	lw $ra,0($sp)		# repoe valor
	addiu $sp,$sp,-4	# liberta espaço na stack
	
	jr $ra
###########################################################################
strcat:	addiu $sp,$sp,-12	# reservar espaço na stack
	sw $ra,0($sp)		# guarda endereço de retorno
	sw $s0,4($sp)		# guarda valor do s0
	sw $s1,8($sp)		# guarda valor do s1
	
	move $s0,$a0		# s0 = dst = p
	move $s1,$a1		# s1 = src
	
while:	lb $t1,0($s0)		# t1 = *p
	
	beq $t1,'\0',endw	# *p != '\0'
	addiu $s0,$s0,1		# p++
	j while
endw:
	
	move $a0,$s0		# a0 = 0
	move $a1,$s1		# a1 = src
	jal strcpy		# chama strcpy
	
	lw $ra,0($sp)		# repoe endereço
	lw $s0,4($sp)		# repoe valor
	lw $s1,8($sp)		# repoe valor
	addiu $sp,$sp,-12	# liberta espaço da stack
	
	jr $ra
	
##########################################################################	
strcpy:	li $t0,0		# i = 0

do1:	add $t1,$a0,$t0		# &dst[i] = dst + i
	add $t2,$a1,$t0		# &src[i] = src + i
	
	lb $t3,0($t2)		# src[i] = &src[i]
	sb $t3,0($t1)		# dst[i}  =src[i]
	
	addiu $t0,$t0,1		#i++

while1:	bne $t3,'\0',do1	# src[i] != 0
	move $v0,$a0		# v0 = dst
	
	jr $ra