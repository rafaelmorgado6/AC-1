# n_even : $t0
# n_odd : $t1
# p1 : $t2
# p2 : $t3
# a + N : $t4
# *p1 % 2 : $t6

	.data
	.eqv N,5		# size = 5
	.eqv Nint, 20		#size * 4
	.eqv print_int10, 1
	.eqv read_int, 5
	.eqv print_char, 11
	.eqv print_string, 4
str:	.asciiz "\n Os impares sao:\n"
a:	.space 20
b:	.space 20
	.text
	.globl main

main:
	li $t0,0		# n_even = 0 
	li $t1,0		# n_odd = 0 
	
	la $t2,a		# p1 = a
	addi $t4,$t2,Nint	# $t4 = a + N
	
for1:
	bge $t2,$t4,endf1	# p1 < a + N
	
	li $v0,read_int
	syscall			# read_int
	sb $v0,0($t2)		# *p1 = read_int
	
	addi $t2,$t2,4		# p1++
	j for1
endf1:	
	la $t2,a		# p1 = a
	la $t3,b		# p2 = b
	addi $t4,$t2,Nint	# $t4 = a + N

for2:
	bge $t2,$t4,endf2	# p1 < a + N
	lb $t5,0($t2)		# $t5 = *p1
	rem $t6,$t5,2		# $t6 = *p1 % 2

if1:
	beqz $t6,else1		# p1 % 2 != 0 
	sb $t5,0($t3)		# *p2 = *p1
	
	addi $t3,$t3,4		# *p2++
	addi $t1,$t1,1		# n_odd++
else1:
	addi $t0,$t0,1		# n_even++
endif1:
	addi $t2,$t2,4		# p1++
	j for2	 
endf2:
	
	la $t3,b		# p2 = b
	sll $t1,$t1,2		# n_odd * 4
	
	addu $t4,$t3,$t1	# b + n_odd
	
	la $a0,str
	li $v0,print_string
	syscall			# print_string( str1 )
	
for3:
	bge $t3,$t4,endf3	# p2 < b + n_odd
	
	lb $a0,0($t3)		# $t3 = *p
	li $v0,print_int10
	syscall			# print( *p2 )
	
	li $a0,','
	li $v0,print_char
	syscall			# print( '\n' )
	
	addi $t3,$t3,4		# p2++
	
	j for3
endf3:
	jr $ra

	