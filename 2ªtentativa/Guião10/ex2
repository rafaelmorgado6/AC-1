	.data
	.eqv print_double, 3
	.eqv print_string 4
	.eqv read_double, 7
k1:	.double 0.0
k2:	.double 0.5
k3: 	.double 1.0
str1:	.asciiz "Insira um número: "	
str2:	.asciiz "\nA raiz quadrada é: " 
	.text
	.globl main
main:	
	addiu $sp,$sp,-4
	sw $ra,0($sp)
	
	la $a0,str1
	li $v0,print_string
	syscall			# print_string(str1)
	
	li $v0,read_double
	syscall			# read_float(x)
	mov.d $f12,$f0		# mover X para valor de entrada da função
	
	jal sqrt
	
	la $a0,str2
	li $v0,print_string
	syscall			# print_string(str2)
	
	mov.d $f12,$f0		# $f12 -> entrada para o print;  $f0 -> saida função
	li $v0,print_double
	syscall			# print_double
	
	lw $ra,0($sp)
	addiu $sp,$sp,4
	
	jr $ra

#########################################################################################
#Recebe val em $f12	$f4 -> aux
sqrt:
	l.d $f0,k3		# xn = 1.0 , já está no registo de retorno
	li $t0,0		# i = 0	
	l.d $f2,k1		# $f2 = 0.0
	
if:
	c.le.d $f12,$f2		# val > 0.0
	bc1t else		# jump else
do:
	mov.d $f4,$f0		# aux = xn
	
	div.d $f6,$f12,$f0	# $f6 = val/xn
	l.d $f8,k2		# $f8 = 0.5
	add.d $f6,$f6,$f0	# (xn + val/xn)
	mul.d $f0,$f8,$f6	# 0.5 * (xn + val/xn)
while:
	c.eq.d $f4,$f0		# (aux != xn)
	bc1f do			# jump do
	addi $t0,$t0,1		# i++
	blt $t0,25,do		#  (++i < 25)
	
	j endif
else:
	l.d $f0,k3		# xn = 0.0 , return xn
endif:	
	jr $ra
	
