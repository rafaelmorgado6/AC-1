.data
	.eqv read_int,5
	.eqv print_string,4
	.eqv MAX_STR_SIZE, 33
str:	.space MAX_STR_SIZE
str1:	.asciiz "\n"
	.text
	.globl main

main:
	addiu $sp,$sp,-4
	sw $ra,0($sp)

domain:
	li $v0,read_int
	syscall
	move $s0,$v0		# val = read_int

	move $a0,$s0		# parametro entrada itoa
	li $a1,2		# parametro entrada itoa
	la $a2,str		# parametro entrada itoa
	jal itoa		# itoa(val,2,str)
	
	move $a0,$v0		# parametro saida itoa
	li $v0,print_string
	syscall			# print_string(itoa(val,2,str))
	
	la $a0,str1
	li $v0,print_string
	syscall			# print_string(\n)

	
	move $a0,$s0
	li $a1,8
	la $a2,str
	jal itoa		#itoa(val,8,str)

	move $a0,$v0
	li $v0,print_string
	syscall			#print_string(itoa(val,8,str))
	
	la $a0,str1
	li $v0,print_string
	syscall			# print_string(\n)
	

	move $a0,$s0
	li $a1,16
	la $a2,str
	jal itoa		#itoa(val,16,str)
	
	move $a0,$v0
	li $v0,print_string
	syscall			#print_string(itoa(val,16,str))

	la $a0,str1
	li $v0,print_string
	syscall			# print_string(\n)
	
whilem:
	bne $s0,0,domain	#val!=0

	li $v0,0		#return 0

	lw $ra,0($sp)
	addiu $sp,$sp,4

	jr $ra

######################################################################################

itoa:
	addiu $sp,$sp,-20
	sw $ra,0($sp)
	sw $s0,4($sp)
	sw $s1,8($sp)
	sw $s2,12($sp)
	sw $s3,16($sp)

	move $s0,$a0	# $s0 = n
	move $s1,$a1	# $s1 = b
	move $s2,$a2	# $s2 = s

	move $s3,$a2	# p = s

ditoa:
	remu $t0,$s0,$s1	# digit = n % b

	divu $s0,$s0,$s1	# n = n / b

	move $a0,$t0	# move digit para parametro de entrada $a0
	jal toascii	# toascii(digit)
	sb $v0,0($s3)	# *p++ = toascii(digit)

	addiu $s3,$s3,1	# p++

witoa:
	bgt $s0,0,ditoa	# n > 0

	li $t1,'\0'	# $t1 = '\0'
	sb $t1,0($s3)	# *p = '\0'

	move $a0,$s2	# mete s como parametro de entrada $a0
	jal strrev	# strrev(s) 
	
	lw $ra,0($sp)
	lw $s0,4($sp)
	lw $s1,8($sp)
	lw $s2,12($sp)
	lw $s3,16($sp)
	addiu $sp,$sp,20

	jr $ra

######################################################################################

toascii:
	addi $a0,$a0,'0'	#v+='0'

iftoascii:
	ble $a0,'9',endiftoascii	#v>'9'

	addi $a0,$a0,7		#v+=7
	
endiftoascii:
	move $v0,$a0
	jr $ra

######################################################################################
strrev:	
	addiu $sp,$sp,-16
	sw $ra,0($sp)
	sw $s0,4($sp)
	sw $s1,8($sp)
	sw $s2,12($sp)		

	move $s0,$a0		#guarda str para dar return
	move $s1,$a0		#p1=str
	move $s2,$a0		#p2=str

while1:
	lb $t0,0($s2)		#*p2 
	beq $t0,'\0',endwhile1	#*p2 !='\0'

	addiu $s2,$s2,1		#p2++

	j while1
endwhile1:	
	addiu $s2,$s2,-1	#p2--

while2:
	bge $s1,$s2,endwhile2	#p1<p2

	move $a0,$s1		#p1 entrada
	move $a1,$s2		#p2 entrada
	jal exchange		#exchange(p1,p2)

	addiu $s1,$s1,1		#p1++
	addiu $s2,$s2,-1	#p2--

	j while2
endwhile2:
	
	move $v0,$s0		#return str

	lw $ra,0($sp)
	lw $s0,4($sp)
	lw $s1,8($sp)
	lw $s2,12($sp)		
	addiu $sp,$sp,16

	jr $ra

######################################################################################

exchange:
	lb $t1,0($a0)		#aux=*c1
	lb $t2,0($a1)		#$t2=p2=*c2

	sb $t2,0($a0)		#*c1=*c2
	sb $t1,0($a1)		#*c2=aux

	jr $ra