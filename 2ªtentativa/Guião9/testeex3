	.data
	.eqv SIZE, 10
	.eqv read_int, 5
	.eqv print_double, 3
k:	.double 0.0
a:	.space 80		# double ocupa 8 espaços 10*8=80
	.text
	.globl main
main:
	addiu $sp,$sp,-4
	sw $ra,0($sp)
	
	li $t0,0		# i = 0	
for:
	bge $t0,SIZE,endfor	#  i < SIZE
	
	li $v0,read_int		# read_int()
	syscall
	mtc1 $v0,$f2		# passar valor lido para coprocessor
	cvt.d.w $f2,$f2		# passar para double (double(read_int))
	
	la $t1,a		# $t1 = a[0]
	sll $t3,$t0,3		# i*8 (double)
	add $t2,$t1,$t3	# $t2 = a[i]
		
	s.d $f2,0($t2)		# a[i] = (double)read_int()
	
	addi $t0,$t0,1		# i++
	j for
endfor:

	la $a0,a 		# $a0(entrada) = a
	li $a1,SIZE		# $a1(entrada) = SIZE
	jal average
	
	mov.d $f12,$f0
	li $v0,print_double
	syscall			# print_double( average(a, SIZE) )

	li $v0,0 		# return 0
	
	lw $ra,0($sp)
	addiu $sp,$sp,4
	
	jr $ra
	
##########################################################################

average: 
	l.d $f2,k		# sum = 0.0
	move $t1,$a1		# $t1 = n
	move $t2,$t1		# i = n
	
for1:
	blez $t2,endfor1	#  i > 0
	
	sub $t3,$t2,1		# i-1
	sll $t3,$t3,3		# (i-1)*8 (double)
	add $t4,$a0,$t3		# arry[i-1]
	l.d $f4,0($t4)
	
	add.d $f2,$f2,$f4	# sum += array[i-1];
	
	sub $t2,$t2,1		# i-- 
	j for1
endfor1:
	mtc1 $a1,$f4		# transforma n em double
	cvt.d.w $f4,$f4		# $f4 = double(n)
	
	div.d $f0,$f2,$f4	# return sum / (double)n, $f0 é o valor de saida
	
	jr $ra
	
	