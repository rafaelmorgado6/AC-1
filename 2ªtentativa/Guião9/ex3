	.data
	.eqv SIZE,10
	.eqv read_int,5
	.eqv print_double,3
K1:	.double 0.0
a:	.space 80		# SIZE*8	
	.text
	.globl main

main:
	addiu $sp,$sp,-4	# reserva espaço
	sw $ra,0($sp)		# guardar endereço
	
	li $t0,0		# i = 0
for:	
	bge $t0,SIZE,endfor	# i<SIZE
	
	li $v0,read_int		# read_int()
	syscall
	
	mtc1 $v0,$f4		# mover para o coprocessador
	cvt.d.w $f4,$f4		# double(read_int())
	
	la $t1,a		# t1 = a[0]
	sll $t2,$t0,3		# t2 = i*8
	add $t1,$t1,$t2		# a[i]
	s.d $f4,0($t1)		# guarda o valor de f4 no array, a[i](double)read_int()
	
	addi $t0,$t0,1		# i++
	j for			# }for
endfor:	
	la $a0,a		# a0 = a
	li $a1,SIZE		# a1 = SIZE
	jal average		# chama average
	
	mov.d $f12,$f0	
	li $v0,print_double	# print_double(average(a,SIZE))
	syscall
	
	li $v0,0		# return 0
	
	lw $ra,0($sp)		# repor endereço
	addiu $sp,$sp,4		# libertar espaço
	
	jr $ra			# fim main

average:
	l.d $f0,K1		# sum = 0.0
	move $t0,$a1		# i = n
	
for1:	
	ble $t0,0,endfor1	# i>0
	
	sub $t1,$t0,1		# i-1
	sll $t1,$t1,3
	addu $t1,$a0,$t1
	l.d $f4,0($t1)		# array[i-1]
	
	add.d $f0,$f0,$f4	# sum += array[i-1]
	
	sub $t0,$t0,1		# i-- 
	j for1			# jump for1
		
endfor1:
	mtc1 $a1,$f4		# transformar o n em double
	cvt.d.w $f4,$f4		# f4=double(n)
	div.d $f0,$f0,$f4	# return sum/(double)n
			
	jr $ra			# fim main