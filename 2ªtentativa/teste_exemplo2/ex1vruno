#Mapa de registos
#rv : $t5
#n : $t4
#sum : $t0
#nit : $t1
#pt : $t2

	.data
	.eqv SIZE,8
	.eqv read_int,5
	.eqv print_string,4
	.eqv print_int10,1
list:	.space 32
str:	.asciiz "Media invalida!\n"
	.text
	.globl main

main:
	li $t0,0	#sum=0
	li $t1,0	#nit=0

	la $t2,list	#pt=&list[0]

	li $t3,SIZE	#$t3=SIZE
	sll $t3,$t3,2	#$t3=SIZE*4
	addu $t3,$t2,$t3	#$t3=list+SIZE	(faz se a multiplicação por 4 antes para conseguirmos o array completo

for1:
	bge $t2,$t3,endfor1	#pt <(list+SIZE)	

	li $v0,read_int
	syscall		#read_int()
	sw $v0,0($t2)	#*pt=read_int()

	addiu $t2,$t2,4	#pt++ (+4 array de inteiros)		

	j for1
endfor1:	

	li $t4,0	#n=0
for2:
	bge $t4,SIZE,endfor2	#n<SIZE

	la $t2,list		#$t2=&list[0]
	sll $t5,$t4,2		#n*4
	addu $t5,$t2,$t5	#$t5=&list[n]
	lw $t6,0($t5)		#$t6=list[n]
if1:	
	blt $t6,0,endif1	#list[n]>=0

	add $t0,$t0,$t6		#sum+=list[n]
	addi $t1,$t1,1		#nit++

endif1:
	addiu $t4,$t4,1		#n++

	j for2
endfor2:

if2:
	ble $t1,0,else2		#nit>0

	div $a0,$t0,$t1		#$a0=sum/nit
	li $v0,print_int10
	syscall			#print_int10(sum/nit)

	li $t5,0		#rv=0

	j endif2
else2:
	la $a0,str
	li $v0,print_string
	syscall			#print_string(str)

	li $t5,-1		#rv=-1
endif2:

	move $v0,$t5		#return rv

	jr $ra