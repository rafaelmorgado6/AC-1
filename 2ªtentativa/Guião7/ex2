# Mapa de registos:
# str: $a0 -> $s0 (argumento é passado em $a0)
# p1: $s1 (registo callee-saved)
# p2: $s2 (registo callee-saved)
		
		.data
str:		.asciiz "ITED - orievA ed edadisrevinU"
		.eqv print_string, 4
		.text
		.globl main
main:
		addiu $sp,$sp,-4  		# Reserva espaço na stack 
		sw $ra,0($sp)  			# Copia registos
		
		la $a0,str			# $a0 = str[0]
		jal strrev
		
		move $a0,$v0
		li $v0,print_string
		syscall
		
		lw $ra,0($sp)  			# Repõe o valor
		addiu $sp,$sp,4  		# Liberta espaço na stack
		
		jr $ra
#####################################################

strrev:
		addiu $sp,$sp,-16		# reserva espaço na stack
		sw $ra, 0($sp)			# guarda endereço de retorno
		sw $s0,4($sp) 			# guarda valor dos registos: $s0
 		sw $s1,8($sp) 			# 					  $s1
		sw $s2,12($sp)			# 					  $s2
		
		move $s0,$a0 			# registo "callee-saved"
		move $s1,$a0 			# p1 = str
 		move $s2,$a0 			# p2 = str	
while1:
 		lb $t0,0($s2)			# $t0 = p2
 		beq $t0,'\0',endwhile1		# *p2 != '\0'
 		addiu $s2,$s2,1			# p2++
 		j while1
endwhile1:
 		addiu $s2,$s2,-1		# p2--
 
while2:
 		bge $s1,$s2,endwhile2		# p1 < p2
 		
 		move $a0,$s1			# $a0 = p1 (parametro de entrada para a exchange)
 		move $a1,$s2			# $a1 = p2 (parametro de entrada para a exchange)
 		jal exchange
 		
 		addiu $s1,$s1,1			# p1++
 		addiu $s2,$s2,-1		# p2--
 		j while2
 endwhile2:
 		move $v0,$s0 			# return str
 		lw $ra, 0($sp)			# guarda endereço de retorno
		lw $s0,4($sp) 			# guarda valor dos registos: $s0
 		lw $s1,8($sp) 			# 					  $s1
		lw $s2,12($sp)			# 
		addiu $sp,$sp,16  		# liberta espaço da stack
		
		jr $ra
		
 #####################################################	
 
exchange:
		lb $t0,0($a0)			# $t0 = c1
		lb $t1,0($a1)			# $t1 = c2
		sb $t1,0($a0)			# c2 -> c1
		sb $t0,0($a1)			# c1 -> c2
		jr $ra
			 
