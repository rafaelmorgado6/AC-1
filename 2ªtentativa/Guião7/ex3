# i - $t0

		.data
		.eqv STR_MAX_SIZE,30
		.eqv print_string,4
		.eqv print_int10,1
str1:		.asciiz "I serodatupmoC ed arutetiuqrA"
str2:		.space 31
str3:		.asciiz "\n"
str4:		.asciiz "String too long: "
		.text
		.globl main
main:
		addiu $sp,$sp,-4	# reserva espaço na stack
		sw $ra,0($sp)		# guarda valor do registo de retorno
	
		la $a0,str1		# valor passado à sub-rotina a0 = str1
		jal strlen		# chama a sub-rotina strlen
	
if: 	
		bgt $v0,STR_MAX_SIZE,else	#strlen(str1) <= STR_MAX_SIZE
	
		la $a0,str2		# a0 = str2
		la $a1,str1		# a1 = str1
		jal strcpy		# chama a sub-rotina strcpy
	
		move $a0,$v0
		li $v0,print_string	# print_string(str2)
		syscall
	
		la $a0,str3
		li $v0,print_string	# print_string('\n')
		syscall
	
		la $a0,str2 		# $a0 = str2
		jal strrev		# chama a sub-rotina strrev
	
		or $a0,$0,$v0
		li $v0,print_string	# print_string(strrev(str2))
		syscall
	
		li $s0,0		# exit_value = 0
	
		j endif

else:		
		la $a0,str4
		li $v0, print_string	# print_string(strlen(str1))
		syscall
	
		la $a0,str1		# a0 = str1
		jal strlen		# chama a sub-rotina strlen
		
		or $a0,$0,$v0
		li $v0,print_string	# print_string(strlen(str1))
		syscall
		
		li $s0,-1		# exit_value = -1
	
		j endif
	
endif:	
		move $v0,$s0		# return exit value
	
		lw $ra,0($sp)		# repoe enedereço de retorno
		addiu $sp,$sp,-4	# liberta espaço na stack 

#######################################################################################

strcpy:	
		li $t0,0		# i = 0

do1:		add $t1,$a0,$t0		# &dst[i] = dst + i
		add $t2,$a1,$t0		# &src[i] = src + i
	
		lb $t3,0($t2)		# src[i] = &src[i]
		sb $t3,0($t1)		# dst[i}  =src[i]
	
		addiu $t0,$t0,1		#i++

while1:	
		bne $t3,'\0',do1	# src[i] != 0
	
		move $v0,$a0		# v0 = dst
		jr $ra
	
########################################################################################

strlen:	
		li $t1,0 		# len = 0;

while2: 
		lb $t0,0($a0) 		# while(*s++ != '\0')
 	
 		addiu $a0,$a0,1 	# *s++
 	
 		beq $t0,'\0',endw2 	# {
 	
 		addi $t1,$t1,1 		# len++;
 		j while2 			# }

endw2:
	 	move $v0,$t1 		# return len;
 		jr $ra 			
 	
 #####################################################################################
 		
strrev:
		addiu $sp,$sp,-16	# reserva espaço na stack,16 porque se usa				
		sw $ra,0($sp)		# guarda endereço de retorno
		sw $s0,4($sp)		# guarda valor do registo s0
		sw $s1,8($sp)		# guarda valor do registo s1
		sw $s2,12($sp)		# guarda valor do registo s2
	
		move $s0,$a0		# registo "callee-saved"
		move $s1,$a0		# p1=str
		move $s2,$a0		# p2=str
	
while3:
		lb $t0,0($s2)		# t0=*p2
		beq $t0,'\0',endw4      # p2!='\0'
		addiu $s2,$s2,1		# p2++
		j while3			# }
endw4:
		subu $s2,$s2,1		# p2--
	
while4:
		bgeu $s1,$s2,endw3	# p1<p2
	
		move $a0,$s1
		move $a1,$s2
		jal exchange 		# exchange(p1,p2)
	
		addiu $s1,$s1,1		# p1++
		subu $s2,$s2,1		# p2--
		j while4			# }
	
endw3:		
		move $v0,$s0		# return str
		lw $ra,0($sp)		# repoe endereço de retorno
		lw $s0,4($sp)		# repoe o valor do registo s0
		lw $s1,8($sp)		# repoe o valor do registo s1
		lw $s2,12($sp)		# repoe o valor do registo s2
	
		addiu $sp,$sp,16	# liberta espaço na stack
		jr $ra			

	
exchange:
		lb $t0,0($a0)		# t0 = *c1
		lb $t1,0($a1)		# t1 = *c2
		sb $t0,0($a1)		# t0 = *c2
		sb $t1,0($a0)		# t1 = *c1
		jr $ra	
